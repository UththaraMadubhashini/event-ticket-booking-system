import React from 'react';
import Card from '@mui/material/Card';
import CardHeader from '@mui/material/CardHeader';
import CardMedia from '@mui/material/CardMedia';
import CardContent from '@mui/material/CardContent';
import Chip from '@mui/material/Chip';
import Grid from '@mui/material/Grid';
import CalendarMonthIcon from '@mui/icons-material/CalendarMonth';
import AccessTimeIcon from '@mui/icons-material/AccessTime';
import RoomIcon from '@mui/icons-material/Room';
import Button from '@mui/material/Button';
import Stack from '@mui/material/Stack';
import { Link } from 'react-router-dom';

//button color
const buttonColor = {
  background: '#439A97',
  border: '3.5px solid #135D66',
  boxShadow: '#62B6B7',
  color: 'white',
  height: 45,
  padding: '0 30px',
  marginTop: '10px',
};

const EventCard = ({ title, image, date, time, location, priceRange, ticketImage, priceTagImage, availability }) => {
  return (
    <Card sx={{
      width: 325,
      height: 525,
      marginTop: 3.5,
      marginRight: 3,
      background: '#CBEDD5',
      border: '3px solid #003C43',
      
    }}>
    
      <CardHeader
        title={title}
      />
      <CardMedia
        component="img"
        height="194"
        image={image}
        alt="Event"
      />
      <CardContent>
  <Grid container alignItems="center" spacing={8}>
    <Grid item>
      <Chip icon={<CalendarMonthIcon />} label={date} sx={{ backgroundColor: '#E3FEF7' }} />
    </Grid>
    <Grid item>
      <Chip icon={<AccessTimeIcon />} label={time} sx={{ backgroundColor: '#E3FEF7' }} />
    </Grid>
  </Grid>
  <Grid container alignItems="center" marginTop={2}>
    <Grid item>
      <Chip icon={<RoomIcon />} label={location} sx={{ backgroundColor: '#E3FEF7' }} />
    </Grid>
  </Grid>
  <Grid item>
    <Chip
      icon={<img src={require('../../Assets/Images/availabilityIcon.png')} alt="Availability" 
      style={{ width: '20px', height: '20px', marginRight: '0px'}} />}
      label={`Availability: ${availability}`} 
      sx={{ backgroundColor: '#E3FEF7', marginTop: '15px' }}
    />
  </Grid>
  <Grid container alignItems="center" marginTop={2}>
    <Grid item>
      <Chip
        icon={<img src={priceTagImage} alt="Price Tag" 
        style={{ width: '25px', height: '20px', marginRight: '5px'}} />}
        label={priceRange}
        sx={{ backgroundColor: '#E3FEF7' }}
      />
    </Grid>
  </Grid>
</CardContent>

      <Stack direction="row" spacing={2} justifyContent="center">
      <Button
  variant="contained"
  component={Link}
  to={`/buy-tickets/${title.replace(/\s+/g, '-').toLowerCase()}`}
  startIcon={<img src={ticketImage} alt="Ticket Icon" style={{ width: '25px', height: '20px', marginRight: '5px' }} />}
  sx={{...buttonColor,
    borderRadius: '40px',
    '&:hover': {
      background: '#135D66', // Change hover background color
    }}}
>
  Buy Tickets
</Button>

      </Stack>
    </Card>
  );
}

export default EventCard;


//booking pg
import * as React from 'react';
import Typography from '@mui/material/Typography';
import Breadcrumbs from '@mui/material/Breadcrumbs';
import Link from '@mui/material/Link';
import Table from '@mui/material/Table';
import TableBody from '@mui/material/TableBody';
import TableCell from '@mui/material/TableCell';
import TableContainer from '@mui/material/TableContainer';
import TableHead from '@mui/material/TableHead';
import TableRow from '@mui/material/TableRow';
import Paper from '@mui/material/Paper';
import Button from '@mui/material/Button';
import ThumbUpAltIcon from '@mui/icons-material/ThumbUpAlt';
import Dialog from '@mui/material/Dialog';
import DialogActions from '@mui/material/DialogActions';
import DialogContent from '@mui/material/DialogContent';
import DialogContentText from '@mui/material/DialogContentText';
import DialogTitle from '@mui/material/DialogTitle';

//button color
const buttonColor = {
  background: '#439A97',
  border: '3.5px solid #135D66',
  borderRadius: 3,
  boxShadow: '#62B6B7',
  color: 'white',
  height: 45,
  padding: '0 30px',
  marginTop: '10px',
};

// Breadcrumbs
function handleClick(event) {
  event.preventDefault();
  console.info('You clicked a breadcrumb.');
}

// Create table
function createData(name, price, count, seats, amount) {
  return { name, price, count, seats, amount };
}

const rows = [
  createData('Event Name', 100, 1, 24, 100), // Default count is set to 1
];

export default function Booking() {
  const [count, setCount] = React.useState(rows[0].count); // State for the selected count

  const handleChange = (event) => {
    const newCount = parseInt(event.target.value);
    if (!isNaN(newCount)) {
      setCount(newCount);
    }
  };

  const [open, setOpen] = React.useState(false);

  const handleClickOpen = () => {
    setOpen(true);
  };

  const handleClose = () => {
    setOpen(false);
  };

  return (
    <Typography style={{ fontFamily: 'YourCreativeFont, sans-serif' }}>
      <div style={{ display: 'flex', flexDirection: 'column', textAlign: 'center' }}>
        {/* Breadcrumb */}
        <div role="presentation" onClick={handleClick}>
          <Breadcrumbs aria-label="breadcrumb">
            <Link underline="hover" color="inherit" href="#">
              Home
            </Link>
            <Link
              underline="hover"
              color="inherit"
              href="#"
            >
              Buy Ticket
            </Link>
            <Typography color="text.primary">Ticket Bookings</Typography>
          </Breadcrumbs>

          <Typography variant="h6" gutterBottom sx={{ fontWeight: '700', textAlign: 'center' }}>
            Select Your Seats
          </Typography>
        </div>

        {/* Table */}
        <div>
          <TableContainer component={Paper} sx={{ width: '80%', margin: 'auto', marginTop: '30px', marginBottom: '80px'}}>
            <Table sx={{ minWidth: 650 }} size="small" aria-label="a dense table">
              <TableHead>
                <TableRow>
                  <TableCell align="center" sx={{ fontWeight: 'bold', fontSize: '14px', bgcolor: '#E3FEF7' }}>TICKET</TableCell>
                  <TableCell align="center" sx={{ fontWeight: 'bold', fontSize: '14px', bgcolor: '#E3FEF7' }}>PRICE</TableCell>
                  <TableCell align="center" sx={{ fontWeight: 'bold', fontSize: '14px', bgcolor: '#E3FEF7' }}>COUNT OF TICKETS</TableCell>
                  <TableCell align="center" sx={{ fontWeight: 'bold', fontSize: '14px', bgcolor: '#E3FEF7' }}>SEATS</TableCell>
                  <TableCell align="center" sx={{ fontWeight: 'bold', fontSize: '14px', bgcolor: '#7AB2B2' }}>AMOUNT</TableCell>
                </TableRow>
              </TableHead>
              <TableBody>
                {rows.map((row) => (
                  <TableRow
                    key={row.name}
                    sx={{ '&:last-child td, &:last-child th': { border: 2 } }}
                  >
                    <TableCell align="center" component="th" scope="row">{row.name}</TableCell>
                    <TableCell align="center">{row.price}</TableCell>
                    <TableCell align="center">
                      <input
                        type="number"
                        value={count}
                        onChange={handleChange}
                        style={{ width: 60, textAlign: 'center' }}
                      />
                    </TableCell>
                    <TableCell align="center">{row.seats}</TableCell>
                    <TableCell align="center">{row.amount}</TableCell>
                  </TableRow>
                ))}
              </TableBody>
            </Table>
          </TableContainer>
        </div>
        <Typography variant="h6" gutterBottom sx={{ fontWeight: '700', textAlign: 'center' }}>
            Pick Your Seats
        </Typography>

        {/* Confrim popup */}
        <React.Fragment>
        <Button
        sx={{
        width: '250px',
        height: '40px',
        mx: 'auto', // horizontally center the button
        ...buttonColor,
        borderRadius: '40px',
        '&:hover': {
          background: '#135D66', // Change hover background color
        }}}
        variant="contained"
        onClick={handleClickOpen}
        startIcon={<ThumbUpAltIcon />}
      >
        Booking Confirm
        </Button>

        <Dialog
        open={open}
        onClose={handleClose}
        aria-labelledby="alert-dialog-title"
        aria-describedby="alert-dialog-description" 
      >
        <DialogTitle id="alert-dialog-title">
        <Typography variant="h6" component="div" fontWeight="bold">
            Your Booking Confirmations
        </Typography>
        </DialogTitle>
        <DialogContent>
          <DialogContentText id="alert-dialog-description">
            Your Booking Total Amount
            <Typography variant="subtitle1" color="textPrimary" textAlign="center">
                <br/> RS.__ {}
            </Typography>
          </DialogContentText>
        </DialogContent>
        <DialogActions>
          <Button onClick={handleClose} 
          sx={{...buttonColor,
              borderRadius: '40px',
              '&:hover': {
              background: '#135D66', // Change hover background color
        }}}> NEXT</Button>
        </DialogActions>
      </Dialog>
    </React.Fragment>
      </div>
    </Typography>
  );
}


// all validations with cd payment
import React from 'react';
import Card from 'react-credit-cards';
import {
  formatCreditCardNumber,
  formatCVC,
  formatExpirationDate,
} from './utils';
import 'react-credit-cards/es/styles-compiled.css';
import {
  TextField,
  Button,
  Container,
  Typography,
  Box,
  CssBaseline,
  Grid,
  Snackbar,
  Alert,
} from '@mui/material';
import { createTheme, ThemeProvider } from '@mui/material/styles';

const theme = createTheme();

class Payment extends React.Component {
  state = {
    number: '',
    name: '',
    expiry: '',
    cvc: '',
    issuer: '',
    focused: '',
    formData: null,
    errors: {
      name: '',
      number: '',
      expiry: '',
      cvc: '',
    },
    snackbar: {
      open: false,
      message: '',
      severity: 'success',
    },
  };

  handleCallback = ({ issuer }, isValid) => {
    if (isValid) {
      this.setState({ issuer });
    }
  };

  handleInputFocus = ({ target }) => {
    this.setState({
      focused: target.name,
    });
  };

  handleInputChange = ({ target }) => {
    const { name, value } = target;
    let formattedValue = value;
  
    if (name === 'number') {
      // Remove any non-digit characters and limit input to 19 digits
      formattedValue = value.replace(/\D/g, '').slice(0, 19);
      formattedValue = formatCreditCardNumber(formattedValue);
    } else if (name === 'expiry') {
      formattedValue = formatExpirationDate(value);
    } else if (name === 'cvc') {
      formattedValue = formatCVC(value);
    }
  
    this.setState({ [name]: formattedValue }, () => {
      this.validateField(name, formattedValue);
    });
  };  
  

  validateField = (name, value) => {
    let errors = this.state.errors;
    
    switch (name) {
      case 'name':
        errors.name = /^[a-zA-Z\s]+$/.test(value) ? '' : 'Name must contain only letters and spaces';
        break;
      case 'number':
        const cardNumberLength = value.replace(/\s/g, '').length;
        errors.number = (cardNumberLength >= 13 && cardNumberLength <= 19) ? '' : 'Card number must have 13-19 digits';
        break;
      case 'expiry':
        errors.expiry = /^(0[1-9]|1[0-2])\/?([0-9]{2})$/.test(value) ? '' : 'Expiry date is invalid';
        const today = new Date();
        const [expMonth, expYear] = value.split('/');
        const expiryDate = new Date(`20${expYear}`, expMonth - 1);
        if (expiryDate < today) {
          errors.expiry = 'Card has expired';
        }
        break;
      case 'cvc':
        errors.cvc = /^[0-9]{3,4}$/.test(value) ? '' : 'CVC must be 3 or 4 digits';
        break;
      default:
        break;
    }

    this.setState({ errors });
};


handleSubmit = (e) => {
  e.preventDefault();
  const { errors } = this.state;

  // Check if there are any errors
  if (!this.validateForm(errors)) {
    this.setState({
      snackbar: {
        open: true,
        message: 'Please fill out the form correctly.',
        severity: 'error',
      },
    });
    return; // Exit the function without further execution
  }

  // Check if any of the fields are empty
  const { name, number, expiry, cvc } = this.state;
  if (!name || !number || !expiry || !cvc) {
    this.setState({
      snackbar: {
        open: true,
        message: 'Please fill out all the fields.',
        severity: 'error',
      },
    });
    return; // Exit the function without further execution
  }

  // If no errors and all fields are filled, show success message
  this.setState({
    snackbar: {
      open: true,
      message: 'You have finished payment!',
      severity: 'success',
    },
  });

  this.form.reset();
  this.setState({
    number: '',
    name: '',
    expiry: '',
    cvc: '',
    issuer: '',
    focused: '',
    formData: null,
  });
};

  validateForm = (errors) => {
    let valid = true;
    Object.values(errors).forEach((error) => {
      if (error.length > 0) {
        valid = false;
      }
    });
    return valid;
  };

  handleCloseSnackbar = () => {
    this.setState({
      snackbar: {
        open: false,
        message: '',
        severity: 'success',
      },
    });
  };

  render() {
    const { name, number, expiry, cvc, focused, issuer, errors, snackbar } = this.state;

    return (
      <ThemeProvider theme={theme}>
        <CssBaseline />
        <Container component="main" maxWidth="xs">
          <Box
            sx={{
              display: 'flex',
              flexDirection: 'column',
              alignItems: 'center',
            }}
          >
            <Typography component="h1" variant="h5">
              Enter your payment details
            </Typography>
            <Typography variant="body2">
              Please input your information below
            </Typography>
            <Card
              number={number}
              name={name}
              expiry={expiry}
              cvc={cvc}
              focused={focused}
              callback={this.handleCallback}
            />
            <Box
              component="form"
              ref={(c) => (this.form = c)}
              onSubmit={this.handleSubmit}
              noValidate
              sx={{ mt: 3 }}
            >
              <Grid container spacing={2}>
                <Grid item xs={12}>
                  <TextField
                    variant="outlined"
                    required
                    fullWidth
                    id="name"
                    label="Name on card"
                    name="name"
                    autoComplete="cc-name"
                    onChange={this.handleInputChange}
                    onFocus={this.handleInputFocus}
                    error={errors.name.length > 0}
                    helperText={errors.name}
                  />
                </Grid>
                <Grid item xs={12}>
                  <TextField
                    variant="outlined"
                    required
                    fullWidth
                    id="number"
                    label="Card Number"
                    name="number"
                    autoComplete="cc-number"
                    onChange={this.handleInputChange}
                    onFocus={this.handleInputFocus}
                    error={errors.number.length > 0}
                    helperText={errors.number}
                  />
                </Grid>
                <Grid item xs={12} sm={6}>
                  <TextField
                    variant="outlined"
                    required
                    fullWidth
                    id="expiry"
                    label="MM/YY"
                    name="expiry"
                    autoComplete="cc-exp"
                    onChange={this.handleInputChange}
                    onFocus={this.handleInputFocus}
                    error={errors.expiry.length > 0}
                    helperText={errors.expiry}
                  />
                </Grid>
                <Grid item xs={12} sm={6}>
                  <TextField
                    variant="outlined"
                    required
                    fullWidth
                    id="cvc"
                    label="CVC"
                    name="cvc"
                    autoComplete="cc-csc"
                    onChange={this.handleInputChange}
                    onFocus={this.handleInputFocus}
                    error={errors.cvc.length > 0}
                    helperText={errors.cvc}
                  />
                </Grid>
              </Grid>
              <input type="hidden" name="issuer" value={issuer} />
              <Button
                type="submit"
                fullWidth
                variant="contained"
                sx={{ mt: 3, mb: 2 }}
              >
                Submit
              </Button>
            </Box>
          </Box>
        </Container>
        <Snackbar
          open={snackbar.open}
          autoHideDuration={6000}
          onClose={this.handleCloseSnackbar}
        >
          <Alert onClose={this.handleCloseSnackbar} severity={snackbar.severity} sx={{ width: '100%' }}>
            {snackbar.message}
          </Alert>
        </Snackbar>
      </ThemeProvider>
    );
  }
}

export default Payment;

// booking pg
import * as React from 'react';
import Typography from '@mui/material/Typography';
import Breadcrumbs from '@mui/material/Breadcrumbs';
import Link from '@mui/material/Link';
import Table from '@mui/material/Table';
import TableBody from '@mui/material/TableBody';
import TableCell from '@mui/material/TableCell';
import TableContainer from '@mui/material/TableContainer';
import TableHead from '@mui/material/TableHead';
import TableRow from '@mui/material/TableRow';
import Paper from '@mui/material/Paper';
import Button from '@mui/material/Button';
import ThumbUpAltIcon from '@mui/icons-material/ThumbUpAlt';
import Dialog from '@mui/material/Dialog';
import DialogActions from '@mui/material/DialogActions';
import DialogContent from '@mui/material/DialogContent';
import DialogContentText from '@mui/material/DialogContentText';
import DialogTitle from '@mui/material/DialogTitle';
import { useNavigate } from 'react-router-dom';


//button color
const buttonColor = {
  background: '#439A97',
  border: '3.5px solid #135D66',
  borderRadius: 3,
  boxShadow: '#62B6B7',
  color: 'white',
  height: 45,
  padding: '0 30px',
  marginTop: '10px',
};

// Breadcrumbs
function handleClick(event) {
  event.preventDefault();
  console.info('You clicked a breadcrumb.');
}

// Create table
function createData(name, price, count, seats, amount) {
  return { name, price, count, seats, amount };
}

const rows = [
  createData('Event Name', 100, 1, 24, 100), // Default count is set to 1
];

export default function Booking() {
  const [count, setCount] = React.useState(rows[0].count); // State for the selected count

  const handleChange = (event) => {
    const newCount = parseInt(event.target.value);
    if (!isNaN(newCount)) {
      setCount(newCount);
    }
  };

  const [open, setOpen] = React.useState(false);

  const handleClickOpen = () => {
    setOpen(true);
  };

  const handleClose = () => {
    setOpen(false);
  };

  const navigate = useNavigate(); 

const handleBookingConfirm = () => {
  // navigate to the Payment page
  navigate('/payment');
};

  return (
    <Typography style={{ fontFamily: 'YourCreativeFont, sans-serif' }}>
      <div style={{ display: 'flex', flexDirection: 'column', textAlign: 'center' }}>
        {/* Breadcrumb */}
        <div role="presentation" onClick={handleClick}>
          <Breadcrumbs aria-label="breadcrumb">
            <Link underline="hover" color="inherit" href="#">
              Home
            </Link>
            <Link
              underline="hover"
              color="inherit"
              href="#"
            >
              Buy Ticket
            </Link>
            <Typography color="text.primary">Ticket Bookings</Typography>
          </Breadcrumbs>

          <Typography variant="h6" gutterBottom sx={{ fontWeight: '700', textAlign: 'center' }}>
            Select Your Seats
          </Typography>
        </div>

        {/* Table */}
        <div>
          <TableContainer component={Paper} sx={{ width: '80%', margin: 'auto', marginTop: '30px', marginBottom: '80px'}}>
            <Table sx={{ minWidth: 650 }} size="small" aria-label="a dense table">
              <TableHead>
                <TableRow>
                  <TableCell align="center" sx={{ fontWeight: 'bold', fontSize: '14px', bgcolor: '#E3FEF7' }}>TICKET</TableCell>
                  <TableCell align="center" sx={{ fontWeight: 'bold', fontSize: '14px', bgcolor: '#E3FEF7' }}>PRICE</TableCell>
                  <TableCell align="center" sx={{ fontWeight: 'bold', fontSize: '14px', bgcolor: '#E3FEF7' }}>COUNT OF TICKETS</TableCell>
                  <TableCell align="center" sx={{ fontWeight: 'bold', fontSize: '14px', bgcolor: '#E3FEF7' }}>SEATS</TableCell>
                  <TableCell align="center" sx={{ fontWeight: 'bold', fontSize: '14px', bgcolor: '#7AB2B2' }}>AMOUNT</TableCell>
                </TableRow>
              </TableHead>
              <TableBody>
                {rows.map((row) => (
                  <TableRow
                    key={row.name}
                    sx={{ '&:last-child td, &:last-child th': { border: 2 } }}
                  >
                    <TableCell align="center" component="th" scope="row">{row.name}</TableCell>
                    <TableCell align="center">{row.price}</TableCell>
                    <TableCell align="center">
                      <input
                        type="number"
                        value={count}
                        onChange={handleChange}
                        style={{ width: 60, textAlign: 'center' }}
                      />
                    </TableCell>
                    <TableCell align="center">{row.seats}</TableCell>
                    <TableCell align="center">{row.amount}</TableCell>
                  </TableRow>
                ))}
              </TableBody>
            </Table>
          </TableContainer>
        </div>
        <Typography variant="h6" gutterBottom sx={{ fontWeight: '700', textAlign: 'center' }}>
            Pick Your Seats
        </Typography>

        {/* Confrim popup */}
        <React.Fragment>
        <Button
        sx={{
        width: '250px',
        height: '40px',
        mx: 'auto', // horizontally center the button
        ...buttonColor,
        borderRadius: '40px',
        '&:hover': {
          background: '#135D66', // Change hover background color
        }}}
        variant="contained"
        onClick={handleBookingConfirm}
        startIcon={<ThumbUpAltIcon />}
      >
        Booking Confirm
        </Button>











        <Dialog
        open={open}
        onClose={handleClose}
        aria-labelledby="alert-dialog-title"
        aria-describedby="alert-dialog-description" 
      >
        <DialogTitle id="alert-dialog-title">
        <Typography variant="h6" component="div" fontWeight="bold">
            Your Booking Confirmations
        </Typography>
        </DialogTitle>
        <DialogContent>
          <DialogContentText id="alert-dialog-description">
            Your Booking Total Amount
            <Typography variant="subtitle1" color="textPrimary" textAlign="center">
                <br/> RS.__ {}
            </Typography>
          </DialogContentText>
        </DialogContent>
        <DialogActions>
          <Button onClick={handleClose} 
          sx={{...buttonColor,
              borderRadius: '40px',
              '&:hover': {
              background: '#135D66', // Change hover background color
        }}}> NEXT</Button>
        </DialogActions>
      </Dialog>
    </React.Fragment>
      </div>
    </Typography>
  );
}


